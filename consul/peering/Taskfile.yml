version: '3'

vars:
  DC1_NAME: gcp-dc1
  DC2_NAME: gcp-dc2
  PEER_DC1_NAME: gcp-dc1-default
  PEER_DC2_NAME: gcp-dc2-default

tasks:
  # Phase 1: Setup Nomad-Consul Integration
  setup-nomad-consul:
    desc: "Configure Nomad workload identity on both clusters"
    cmds:
      - echo "Run this on BOTH DC1 and DC2 clusters:"
      - echo "nomad setup consul -y"
    silent: true

  setup-nomad-consul-dc1:
    desc: "Configure Nomad workload identity on DC1"
    cmds:
      - nomad setup consul -y
    env:
      NOMAD_ADDR: "{{.DC1_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC1_NOMAD_TOKEN}}"

  setup-nomad-consul-dc2:
    desc: "Configure Nomad workload identity on DC2"
    cmds:
      - nomad setup consul -y
    env:
      NOMAD_ADDR: "{{.DC2_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC2_NOMAD_TOKEN}}"

  # Phase 2: Create Nomad Namespace (DC1 Only)
  create-namespace:
    desc: "Create ingress namespace and ACL binding rule on DC1"
    cmds:
      - nomad namespace apply -description "namespace for Consul API Gateways" ingress
      - |
        consul acl binding-rule create \
            -method 'nomad-workloads' \
            -description 'Nomad API gateway' \
            -bind-type 'templated-policy' \
            -bind-name 'builtin/api-gateway' \
            -bind-vars 'Name=${value.nomad_job_id}' \
            -selector '"nomad_service" not in value and value.nomad_namespace==ingress'
    env:
      NOMAD_ADDR: "{{.DC1_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC1_NOMAD_TOKEN}}"
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  # Phase 3: Deploy Mesh Gateways
  deploy-mesh-gateways:
    desc: "Deploy mesh gateways on both clusters"
    deps: [deploy-mesh-gateway-dc1, deploy-mesh-gateway-dc2]

  configure-mesh-acls:
    desc: "Configure mesh gateway ACLs on both clusters"
    deps: [configure-mesh-acls-dc1, configure-mesh-acls-dc2]

  configure-mesh-acls-dc1:
    desc: "Configure mesh gateway ACLs on DC1"
    cmds:
      - consul acl policy create -name mesh-gateway -description "Policy for the Mesh Gateways" -rules @mesh-acl.hcl
      - consul acl role create -name mesh-gateway-role -description "A role for the MGW policies" -policy-name mesh-gateway
      - consul acl binding-rule create -method nomad-workloads -bind-type role -bind-name mesh-gateway-role -selector 'value.nomad_service=="mesh-gateway"'
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  configure-mesh-acls-dc2:
    desc: "Configure mesh gateway ACLs on DC2"
    cmds:
      - consul acl policy create -name mesh-gateway -description "Policy for the Mesh Gateways" -rules @mesh-acl.hcl
      - consul acl role create -name mesh-gateway-role -description "A role for the MGW policies" -policy-name mesh-gateway
      - consul acl binding-rule create -method nomad-workloads -bind-type role -bind-name mesh-gateway-role -selector 'value.nomad_service=="mesh-gateway"'
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  deploy-mesh-gateway-dc1:
    desc: "Deploy mesh gateway on DC1"
    cmds:
      - nomad run -var datacenter={{.DC1_NAME}} mesh-gateway.hcl
    env:
      NOMAD_ADDR: "{{.DC1_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC1_NOMAD_TOKEN}}"

  deploy-mesh-gateway-dc2:
    desc: "Deploy mesh gateway on DC2"
    cmds:
      - nomad run -var datacenter={{.DC2_NAME}} mesh-gateway.hcl
    env:
      NOMAD_ADDR: "{{.DC2_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC2_NOMAD_TOKEN}}"

  # Phase 4: Configure Service Mesh
  configure-mesh:
    desc: "Configure service mesh on both clusters"
    deps: [configure-mesh-dc1, configure-mesh-dc2]

  configure-mesh-dc1:
    desc: "Configure service mesh on DC1"
    cmds:
      - consul config write configs/proxy-defaults.hcl
      - consul config write configs/mesh.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  configure-mesh-dc2:
    desc: "Configure service mesh on DC2"
    cmds:
      - consul config write configs/proxy-defaults.hcl
      - consul config write configs/mesh.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  # Phase 5: Deploy Backend Services (DC2)
  deploy-backend:
    desc: "Deploy backend services on DC2"
    cmds:
      - nomad run -var datacenter={{.DC2_NAME}} -var replicas_public=2 -var replicas_private=2 ../../nomad-apps/demo-fake-service/backend.nomad.hcl
    env:
      NOMAD_ADDR: "{{.DC2_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC2_NOMAD_TOKEN}}"

  # Phase 6: Deploy Frontend Service (DC1)
  deploy-frontend:
    desc: "Deploy frontend service on DC1"
    cmds:
      - nomad run -var datacenter={{.DC1_NAME}} ../../nomad-apps/demo-fake-service/frontend.nomad.hcl
    env:
      NOMAD_ADDR: "{{.DC1_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC1_NOMAD_TOKEN}}"

  # Phase 7: Establish Cluster Peering
  generate-peering-token:
    desc: "Generate peering token on DC1"
    cmds:
      - echo "Generating peering token on DC1..."
      - consul peering generate-token -name {{.PEER_DC2_NAME}} | tee dc2-peering-token.txt
      - echo ""
      - echo "Token saved to dc2-peering-token.txt"
      - echo "Use this token in the 'establish-peering' task on DC2"
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  establish-peering:
    desc: "Establish peering on DC2 using token from DC1"
    cmds:
      - |
        if [ -f dc2-peering-token.txt ]; then
          echo "Using token from dc2-peering-token.txt"
          consul peering establish -name {{.PEER_DC1_NAME}} -peering-token "$(cat dc2-peering-token.txt)"
        else
          echo "Error: dc2-peering-token.txt not found"
          echo "Run 'task generate-peering-token' on DC1 first"
          exit 1
        fi
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  # Phase 8: Configure Service Exports
  export-services:
    desc: "Export services from DC2 to DC1"
    cmds:
      - consul config write default-exported.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  # Phase 9: Configure Service Intentions
  configure-intentions:
    desc: "Configure service intentions on both clusters"
    deps: [configure-intentions-dc1, configure-intentions-dc2]

  configure-intentions-dc1:
    desc: "Configure service intentions on DC1"
    cmds:
      - consul config write configs/intentions/front-intentions.hcl
      - consul config write configs/intentions/private-api-intentions.hcl
      - consul config write configs/intentions/public-api-intentions.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  configure-intentions-dc2:
    desc: "Configure service intentions on DC2"
    cmds:
      - consul config write configs/intentions/private-api-intentions.hcl
      - consul config write configs/intentions/public-api-intentions.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  # Phase 10: Deploy API Gateway
  deploy-api-gateway:
    desc: "Deploy API Gateway on DC1"
    cmds:
      - nomad run ../../nomad-apps/api-gw.nomad/api-gw.nomad.hcl
      - consul config write configs/api-gateway/listener.hcl
      - consul config write configs/api-gateway/httproute.hcl
      - consul config write configs/intentions/front-intentions.hcl
    env:
      NOMAD_ADDR: "{{.DC1_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC1_NOMAD_TOKEN}}"
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  # Phase 11: Configure Service Defaults
  configure-service-defaults:
    desc: "Configure service defaults on both clusters"
    deps: [configure-service-defaults-dc1, configure-service-defaults-dc2]

  configure-service-defaults-dc1:
    desc: "Configure service defaults on DC1"
    cmds:
      - consul config write configs/servicedefaults/service-defaults-frontend.hcl
      - consul config write configs/servicedefaults/service-defaults-private-api.hcl
      - consul config write configs/servicedefaults/service-defaults-public-api.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  configure-service-defaults-dc2:
    desc: "Configure service defaults on DC2"
    cmds:
      - consul config write configs/servicedefaults/service-defaults-private-api.hcl
      - consul config write configs/servicedefaults/service-defaults-public-api.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  # Phase 12: Configure Failover Options
  configure-service-resolver:
    desc: "Configure service resolver for failover on DC1"
    cmds:
      - consul config write public-api-resolver.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  configure-sameness-groups:
    desc: "Configure sameness groups on both clusters"
    deps: [configure-sameness-groups-dc1, configure-sameness-groups-dc2]

  configure-sameness-groups-dc1:
    desc: "Configure sameness groups on DC1"
    cmds:
      - consul config write configs/sameness-groups/sg-dc1.hcl
      - consul config write configs/sameness-groups/default-exported-sg.hcl
      - consul config write configs/sameness-groups/public-api-intentions-sg.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  configure-sameness-groups-dc2:
    desc: "Configure sameness groups on DC2"
    cmds:
      - consul config write configs/sameness-groups/sg-dc2.hcl
    env:
      CONSUL_HTTP_ADDR: "{{.DC2_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC2_CONSUL_TOKEN}}"

  # Complete Setup Tasks
  setup-peering:
    desc: "Complete cluster peering setup (run phases in order)"
    cmds:
      - echo "=== Phase 1: Nomad-Consul Integration ==="
      - task: setup-nomad-consul
      - echo ""
      - echo "=== Phase 2: Create Namespace (DC1) ==="
      - task: create-namespace
      - echo ""
      - echo "=== Phase 3: Configure Mesh Gateway ACLs ==="
      - task: configure-mesh-acls
      - echo ""
      - echo "=== Phase 4: Deploy Mesh Gateways ==="
      - task: deploy-mesh-gateways
      - echo ""
      - echo "=== Phase 5: Configure Service Mesh ==="
      - task: configure-mesh
      - echo ""
      - echo "=== Phase 6: Deploy Backend (DC2) ==="
      - task: deploy-backend
      - echo ""
      - echo "=== Phase 7: Deploy Frontend (DC1) ==="
      - task: deploy-frontend
      - echo ""
      - echo "=== Phase 8: Generate Peering Token ==="
      - task: generate-peering-token
      - echo ""
      - echo "Now run: 'task establish-peering' to accept the peering"
      - echo "Then run: 'task complete-peering' to finish setup"

  complete-peering:
    desc: "Complete peering setup after token exchange"
    cmds:
      - echo "=== Phase 9: Export Services ==="
      - task: export-services
      - echo ""
      - echo "=== Phase 10: Configure Intentions ==="
      - task: configure-intentions
      - echo ""
      - echo "=== Phase 11: Deploy API Gateway ==="
      - task: deploy-api-gateway
      - echo ""
      - echo "=== Phase 12 (Optional): Configure Service Defaults ==="
      - task: configure-service-defaults
      - echo ""
      - echo "=== Phase 13 (Optional): Choose Failover Strategy ==="
      - echo "Run either 'task configure-service-resolver' OR 'task configure-sameness-groups'"
      - echo ""
      - echo "=== Setup Complete! ==="
      - task: verify-setup

  # Verification Tasks
  verify-setup:
    desc: "Verify cluster peering setup"
    cmds:
      - echo "=== Verifying Peering Status ==="
      - echo "DC1 Peering Status:"
      - consul peering list
      - echo ""
      - echo "DC2 Peering Status:"
      - CONSUL_HTTP_ADDR={{.DC2_CONSUL_ADDR}} CONSUL_HTTP_TOKEN={{.DC2_CONSUL_TOKEN}} consul peering list
      - echo ""
      - echo "=== Mesh Gateway Status ==="
      - echo "DC1 Mesh Gateway:"
      - nomad job status mesh-gateway
      - echo ""
      - echo "DC2 Mesh Gateway:"
      - NOMAD_ADDR={{.DC2_NOMAD_ADDR}} NOMAD_TOKEN={{.DC2_NOMAD_TOKEN}} nomad job status mesh-gateway
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"
      NOMAD_ADDR: "{{.DC1_NOMAD_ADDR}}"
      NOMAD_TOKEN: "{{.DC1_NOMAD_TOKEN}}"

  check-services:
    desc: "Check service discovery across clusters"
    cmds:
      - echo "=== Services in DC1 ==="
      - consul catalog services
      - echo ""
      - echo "=== Services from DC2 visible in DC1 ==="
      - consul catalog services -peer {{.PEER_DC2_NAME}}
      - echo ""
      - echo "=== Services in DC2 ==="
      - CONSUL_HTTP_ADDR={{.DC2_CONSUL_ADDR}} CONSUL_HTTP_TOKEN={{.DC2_CONSUL_TOKEN}} consul catalog services
      - echo ""
      - echo "=== Services from DC1 visible in DC2 ==="
      - CONSUL_HTTP_ADDR={{.DC2_CONSUL_ADDR}} CONSUL_HTTP_TOKEN={{.DC2_CONSUL_TOKEN}} consul catalog services -peer {{.PEER_DC1_NAME}}
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  # Cleanup Tasks
  cleanup-peering:
    desc: "Remove cluster peering"
    cmds:
      - echo "Removing peering from DC1..."
      - consul peering delete {{.PEER_DC2_NAME}}
      - echo "Removing peering from DC2..."
      - CONSUL_HTTP_ADDR={{.DC2_CONSUL_ADDR}} CONSUL_HTTP_TOKEN={{.DC2_CONSUL_TOKEN}} consul peering delete {{.PEER_DC1_NAME}}
    env:
      CONSUL_HTTP_ADDR: "{{.DC1_CONSUL_ADDR}}"
      CONSUL_HTTP_TOKEN: "{{.DC1_CONSUL_TOKEN}}"

  cleanup-jobs:
    desc: "Stop and purge all deployed jobs"
    cmds:
      - echo "Cleaning up DC1 jobs..."
      - NOMAD_ADDR={{.DC1_NOMAD_ADDR}} NOMAD_TOKEN={{.DC1_NOMAD_TOKEN}} nomad job stop -purge my-api-gateway || true
      - NOMAD_ADDR={{.DC1_NOMAD_ADDR}} NOMAD_TOKEN={{.DC1_NOMAD_TOKEN}} nomad job stop -purge front-service || true
      - NOMAD_ADDR={{.DC1_NOMAD_ADDR}} NOMAD_TOKEN={{.DC1_NOMAD_TOKEN}} nomad job stop -purge mesh-gateway || true
      - echo "Cleaning up DC2 jobs..."
      - NOMAD_ADDR={{.DC2_NOMAD_ADDR}} NOMAD_TOKEN={{.DC2_NOMAD_TOKEN}} nomad job stop -purge backend-services || true
      - NOMAD_ADDR={{.DC2_NOMAD_ADDR}} NOMAD_TOKEN={{.DC2_NOMAD_TOKEN}} nomad job stop -purge mesh-gateway || true

  # Help
  help:
    desc: "Show available tasks and usage"
    cmds:
      - echo "Consul Cluster Peering Tasks"
      - echo "==========================="
      - echo ""
      - echo "Setup Environment Variables First:"
      - echo "export DC1_CONSUL_ADDR=http://[DC1_IP]:8500"
      - echo "export DC1_CONSUL_TOKEN=[DC1_TOKEN]"
      - echo "export DC1_NOMAD_ADDR=http://[DC1_IP]:4646"
      - echo "export DC1_NOMAD_TOKEN=[DC1_TOKEN]"
      - echo "export DC2_CONSUL_ADDR=http://[DC2_IP]:8500"
      - echo "export DC2_CONSUL_TOKEN=[DC2_TOKEN]"
      - echo "export DC2_NOMAD_ADDR=http://[DC2_IP]:4646"
      - echo "export DC2_NOMAD_TOKEN=[DC2_TOKEN]"
      - echo ""
      - echo "Main Tasks:"
      - echo "  task setup-peering     - Run complete setup (phases 1-7)"
      - echo "  task establish-peering - Accept peering token"
      - echo "  task complete-peering  - Finish setup (phases 8-10)"
      - echo "  task verify-setup      - Verify peering status"
      - echo "  task check-services    - Check service discovery"
      - echo ""
      - echo "Individual Phase Tasks:"
      - echo "  task create-namespace"
      - echo "  task deploy-mesh-gateways"
      - echo "  task configure-mesh"
      - echo "  task deploy-backend"
      - echo "  task deploy-frontend"
      - echo "  task generate-peering-token"
      - echo "  task export-services"
      - echo "  task configure-intentions"
      - echo "  task deploy-api-gateway"
    silent: true

  default:
    cmds:
      - task: help