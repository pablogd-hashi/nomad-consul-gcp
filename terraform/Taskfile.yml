version: '3'

vars:
  TERRAFORM_DIR: "."
  JOBS_DIR: "../nomad-jobs"

tasks:
  # Infrastructure tasks
  terraform-plan:
    desc: Plan Terraform infrastructure
    cmds:
      - terraform plan

  terraform-apply:
    desc: Deploy Terraform infrastructure
    cmds:
      - terraform apply -auto-approve

  terraform-destroy:
    desc: Destroy Terraform infrastructure
    cmds:
      - terraform destroy -auto-approve

  # Core services deployment (in order)
  deploy-core:
    desc: Deploy core services in correct order
    cmds:
      - task: setup-env
      - task: deploy-traefik
      - task: wait-for-service
        vars: {SERVICE: traefik}
      - echo "‚úÖ Core services deployed successfully"

  deploy-traefik:
    desc: Deploy Traefik load balancer (first priority)
    cmds:
      - echo "üöÄ Deploying Traefik..."
      - eval $(terraform output -raw eval_vars) && nomad job run {{.JOBS_DIR}}/core/traefik.nomad.hcl
      - echo "‚úÖ Traefik deployment started"

  deploy-monitoring:
    desc: Deploy monitoring stack (Prometheus + Grafana) - OPTIONAL
    cmds:
      - echo "üìä Deploying monitoring stack..."
      - eval $(terraform output -raw eval_vars) && nomad job run {{.JOBS_DIR}}/core/prometheus.nomad.hcl
      - task: wait-for-service
        vars: {SERVICE: prometheus}
      - eval $(terraform output -raw eval_vars) && nomad job run {{.JOBS_DIR}}/core/grafana.nomad.hcl
      - task: wait-for-service
        vars: {SERVICE: grafana}
      - echo "‚úÖ Monitoring stack deployed"

  # Application deployment
  deploy-apps:
    desc: Deploy demo applications
    cmds:
      - echo "üéÆ Deploying demo applications..."
      - eval $(terraform output -raw eval_vars) && nomad job run demo-backend.nomad.hcl
      - task: wait-for-service
        vars: {SERVICE: demo-backend}
      - eval $(terraform output -raw eval_vars) && nomad job run demo-frontend.nomad.hcl
      - task: wait-for-service
        vars: {SERVICE: demo-frontend}
      - echo "‚úÖ Demo applications deployed"

  # Main deployment workflows
  deploy-minimal:
    desc: Deploy minimal stack (Infrastructure + Traefik only)
    cmds:
      - task: terraform-apply
      - sleep 30
      - task: deploy-core
      - task: status

  deploy-with-monitoring:
    desc: Deploy with monitoring stack
    cmds:
      - task: terraform-apply
      - sleep 30
      - task: deploy-core
      - task: deploy-monitoring
      - task: status

  deploy-all:
    desc: Deploy everything (Infrastructure + Core + Monitoring + Apps)
    cmds:
      - task: terraform-apply
      - sleep 30
      - task: deploy-core
      - task: deploy-monitoring
      - task: deploy-apps
      - task: status

  # Utility tasks
  setup-env:
    desc: Setup environment variables
    cmds:
      - echo "Setting up environment variables..."
      - terraform output eval_vars

  wait-for-service:
    desc: Wait for a service to be healthy
    cmds:
      - |
        echo "‚è≥ Waiting for {{.SERVICE}} to be healthy..."
        timeout=300
        elapsed=0
        while [ $elapsed -lt $timeout ]; do
          if eval $(terraform output -raw eval_vars) && nomad job status {{.SERVICE}} 2>/dev/null | grep -q "Status.*running"; then
            echo "‚úÖ {{.SERVICE}} is running"
            break
          fi
          echo "‚è≥ Still waiting for {{.SERVICE}}... ($elapsed/$timeout seconds)"
          sleep 10
          elapsed=$((elapsed + 10))
        done

  # Status and management
  status:
    desc: Show status of all services
    cmds:
      - echo "üìä Cluster Status:"
      - echo "==================="
      - eval $(terraform output -raw eval_vars) && consul members
      - echo ""
      - echo "üìã Nomad Jobs:"
      - echo "==============="
      - eval $(terraform output -raw eval_vars) && nomad job status
      - echo ""
      - echo "üîó Service URLs:"
      - echo "================"
      - terraform output dns_urls || terraform output apps_url

  stop-all:
    desc: Stop all Nomad jobs
    cmds:
      - echo "üõë Stopping all services..."
      - eval $(terraform output -raw eval_vars) && nomad job stop demo-frontend || true
      - eval $(terraform output -raw eval_vars) && nomad job stop demo-backend || true
      - eval $(terraform output -raw eval_vars) && nomad job stop grafana || true
      - eval $(terraform output -raw eval_vars) && nomad job stop prometheus || true
      - eval $(terraform output -raw eval_vars) && nomad job stop traefik || true
      - echo "‚úÖ All services stopped"

  # Development helpers
  logs:
    desc: Show logs for a specific job (Usage: task logs JOB=jobname)
    cmds:
      - |
        if [ -z "{{.JOB}}" ]; then
          echo "Usage: task logs JOB=<job-name>"
          echo "Available jobs:"
          eval $(terraform output -raw eval_vars) && nomad job status | grep -v "ID.*Type.*Priority" | awk '{print $1}'
        else
          eval $(terraform output -raw eval_vars) && nomad alloc logs -f $(nomad job status {{.JOB}} -json | jq -r '.TaskGroups[0].Allocations[0].ID')
        fi

  restart:
    desc: Restart a specific job (Usage: task restart JOB=jobname)
    cmds:
      - |
        if [ -z "{{.JOB}}" ]; then
          echo "Usage: task restart JOB=<job-name>"
        else
          eval $(terraform output -raw eval_vars) && nomad job restart {{.JOB}}
        fi