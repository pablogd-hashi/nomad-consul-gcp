version: '3'

vars:
  DC1_DIR: clusters/dc1/terraform
  DC2_DIR: clusters/dc2/terraform

tasks:
  # === Image Building ===

  build-images:
    desc: "Build HashiStack images with Packer"
    dir: "packer/gcp"
    cmds:
      - echo "Building HashiStack images for new project..."
      - packer build .
      - echo "HashiStack images built successfully"

  # === Infrastructure Deployment ===
  
  deploy-dc1:
    desc: "Deploy DC1 cluster (europe-southwest1)"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform init
      - terraform apply -auto-approve
      - echo "=== DC1 Cluster Info ==="
      - terraform output cluster_info
      - echo "=== DC1 URLs ==="
      - terraform output hashistack_urls
      - echo "=== DC1 Environment Setup ==="
      - terraform output -json environment_setup | jq -r .bash_export

  deploy-dc2:
    desc: "Deploy DC2 cluster (europe-west1)"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform init
      - terraform apply -auto-approve
      - echo "=== DC2 Cluster Info ==="
      - terraform output cluster_info
      - echo "=== DC2 URLs ==="
      - terraform output hashistack_urls
      - echo "=== DC2 Environment Setup ==="
      - terraform output -json environment_setup | jq -r .bash_export

  deploy-both:
    desc: "Deploy both DC1 and DC2 clusters (sequential)"
    cmds:
      - task: deploy-dc1
      - task: deploy-dc2
      - echo "=== Both clusters deployed ==="
      - echo "CRITICAL NEXT STEPS:"
      - echo "1. Run 'nomad setup consul -y' on each cluster's server nodes"
      - echo "2. Use task ssh-dc1-server and task ssh-dc2-server to connect"
      - echo "3. Then deploy networking and monitoring"

  # === Consul-Nomad Integration Setup ===

  setup-consul-nomad-dc1:
    desc: "Setup Consul-Nomad integration for DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "Setting up Consul-Nomad integration for DC1..."
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP 'sudo nomad setup consul -y'
      - echo "DC1 Consul-Nomad integration complete"

  setup-consul-nomad-dc2:
    desc: "Setup Consul-Nomad integration for DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "Setting up Consul-Nomad integration for DC2..."
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP 'sudo nomad setup consul -y'
      - echo "DC2 Consul-Nomad integration complete"

  setup-consul-nomad-both:
    desc: "Setup Consul-Nomad integration for both clusters"
    cmds:
      - task: setup-consul-nomad-dc1
      - task: setup-consul-nomad-dc2
      - echo "=== Consul-Nomad integration complete for both clusters ==="

  # === Application Deployment ===

  deploy-traefik-dc1:
    desc: "Deploy Traefik to DC1"
    dir: "clusters/dc1"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/traefik.hcl
      - echo "Traefik deployed to DC1"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status traefik

  deploy-traefik-dc2:
    desc: "Deploy Traefik to DC2"
    dir: "clusters/dc2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/traefik.hcl
      - echo "Traefik deployed to DC2"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status traefik

  deploy-traefik:
    desc: "Deploy Traefik to both clusters"
    cmds:
      - task: deploy-traefik-dc1
      - task: deploy-traefik-dc2
      - echo "=== Traefik deployed to both clusters ==="

  deploy-monitoring-dc1:
    desc: "Deploy Prometheus and Grafana to DC1"
    dir: "clusters/dc1"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/prometheus.hcl
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/grafana.hcl
      - echo "Monitoring stack deployed to DC1"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status prometheus
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status grafana

  deploy-monitoring-dc2:
    desc: "Deploy Prometheus and Grafana to DC2"
    dir: "clusters/dc2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/prometheus.hcl
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/grafana.hcl
      - echo "Monitoring stack deployed to DC2"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status prometheus
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status grafana

  deploy-monitoring:
    desc: "Deploy monitoring stack to both clusters"
    cmds:
      - task: deploy-monitoring-dc1
      - task: deploy-monitoring-dc2
      - echo "=== Monitoring stack deployed to both clusters ==="

  # === Status and Information ===

  check-infra:
    desc: "Check deployment status of both clusters"
    cmds:
      - echo "Checking DC1 Infrastructure..."
      - cd {{.DC1_DIR}} && terraform show > /dev/null 2>&1 && echo "DC1 deployed" || echo "DC1 not deployed"
      - echo "Checking DC2 Infrastructure..."  
      - cd {{.DC2_DIR}} && terraform show > /dev/null 2>&1 && echo "DC2 deployed" || echo "DC2 not deployed"

  status-dc1:
    desc: "Show DC1 status"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform output cluster_info || echo "No cluster info available"

  status-dc2:
    desc: "Show DC2 status"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform output cluster_info || echo "No cluster info available"

  show-urls:
    desc: "Show all access URLs for both clusters"
    cmds:
      - echo "=== DC1 URLs ==="
      - cd {{.DC1_DIR}} && terraform output hashistack_urls || echo "No URLs available"
      - cd {{.DC1_DIR}} && terraform output monitoring_urls || echo "No monitoring URLs available"
      - echo ""
      - echo "=== DC2 URLs ==="
      - cd {{.DC2_DIR}} && terraform output hashistack_urls || echo "No URLs available"
      - cd {{.DC2_DIR}} && terraform output monitoring_urls || echo "No monitoring URLs available"

  eval-vars-dc1:
    desc: "Show environment variables for DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "# DC1 Environment Setup"
      - terraform output -json environment_setup | jq -r .bash_export

  eval-vars-dc2:
    desc: "Show environment variables for DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "# DC2 Environment Setup"
      - terraform output -json environment_setup | jq -r .bash_export

  eval-vars:
    desc: "Show environment variables for both clusters"
    cmds:
      - task: eval-vars-dc1
      - echo ""
      - task: eval-vars-dc2

  get-server-ips-dc1:
    desc: "Get external server IPs for DC1 (for Kubernetes integration)"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "=== DC1 Server External IPs ==="
      - gcloud compute instances list --filter='name~hashi-server' --format='value(name,EXTERNAL_IP)' | head -3
      - echo ""
      - echo "For Kubernetes Helm values, use these IPs in externalServers.hosts:"
      - gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3 | sed 's/^/  - "/' | sed 's/$/"/'

  get-server-ips-dc2:
    desc: "Get external server IPs for DC2 (for Kubernetes integration)"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "=== DC2 Server External IPs ==="
      - gcloud compute instances list --filter='name~hashi-server' --format='value(name,EXTERNAL_IP)' | head -3
      - echo ""
      - echo "For Kubernetes Helm values, use these IPs in externalServers.hosts:"
      - gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3 | sed 's/^/  - "/' | sed 's/$/"/'

  get-server-ips:
    desc: "Get external server IPs for both clusters"
    cmds:
      - task: get-server-ips-dc1
      - echo ""
      - task: get-server-ips-dc2


  # === GKE Cluster Management ===

  deploy-gke-east:
    desc: "Deploy GKE cluster k8s-east"
    dir: "gke/k8s-east/terraform"
    cmds:
      - echo "=== Deploying GKE cluster k8s-east ==="
      - terraform init
      - terraform plan
      - terraform apply -auto-approve
      - echo "=== GKE k8s-east cluster deployed ==="
      - terraform output get_credentials_command

  deploy-gke-west:
    desc: "Deploy GKE cluster k8s-west"
    dir: "gke/k8s-west/terraform"
    cmds:
      - echo "=== Deploying GKE cluster k8s-west ==="
      - terraform init
      - terraform plan
      - terraform apply -auto-approve
      - echo "=== GKE k8s-west cluster deployed ==="
      - terraform output get_credentials_command

  deploy-gke-both:
    desc: "Deploy both GKE clusters"
    cmds:
      - task: deploy-gke-east
      - task: deploy-gke-west
      - echo "=== Both GKE clusters deployed ==="

  destroy-gke-east:
    desc: "Destroy GKE cluster k8s-east"
    dir: "gke/k8s-east/terraform"
    cmds:
      - terraform destroy -auto-approve

  destroy-gke-west:
    desc: "Destroy GKE cluster k8s-west"
    dir: "gke/k8s-west/terraform"
    cmds:
      - terraform destroy -auto-approve

  destroy-gke-both:
    desc: "Destroy both GKE clusters"
    cmds:
      - task: destroy-gke-east
      - task: destroy-gke-west

  setup-kubectl-contexts:
    desc: "Setup kubectl contexts for both GKE clusters"
    cmds:
      - echo "=== Setting up kubectl contexts ==="
      - cd gke/k8s-east/terraform && $(terraform output -raw get_credentials_command)
      - cd gke/k8s-west/terraform && $(terraform output -raw get_credentials_command)
      - echo "=== kubectl contexts configured ==="
      - kubectl config get-contexts | grep gke

  create-consul-partitions:
    desc: "Create admin partitions on Consul servers"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
    cmds:
      - echo "=== Creating Consul admin partitions ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul partition create -name="k8s-east" -description="Kubernetes East Cluster"
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul partition create -name="k8s-west" -description="Kubernetes West Cluster"
      - echo "=== Partitions created ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul partition list

  create-consul-namespaces:
    desc: "Create DTAP namespaces in partitions"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
    cmds:
      - echo "=== Creating Consul namespaces ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace create -name="development" -partition="k8s-east"
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace create -name="testing" -partition="k8s-east"
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace create -name="acceptance" -partition="k8s-east"
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace create -name="development" -partition="k8s-west"
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace create -name="testing" -partition="k8s-west"
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace create -name="production" -partition="k8s-west"
      - echo "=== Namespaces created ==="

  create-partition-acl-policies:
    desc: "Create ACL policies for admin partitions"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
    cmds:
      - echo "=== Creating ACL policies for partitions ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul acl policy create -name="k8s-east-partition-policy" -description="Policy for k8s-east partition" -rules @../gke/acl-policies/k8s-east-partition-policy.hcl
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul acl policy create -name="k8s-west-partition-policy" -description="Policy for k8s-west partition" -rules @../gke/acl-policies/k8s-west-partition-policy.hcl
      - echo "=== ACL policies created ==="

  create-partition-tokens:
    desc: "Create ACL tokens for admin partitions"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
    cmds:
      - echo "=== Creating ACL tokens for partitions ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul acl token create -description="Token for k8s-east partition" -policy-name="k8s-east-partition-policy" -partition="k8s-east" > ../gke/k8s-east-token.txt
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul acl token create -description="Token for k8s-west partition" -policy-name="k8s-west-partition-policy" -partition="k8s-west" > ../gke/k8s-west-token.txt
      - echo "=== ACL tokens created ==="
      - echo "k8s-east token saved to gke/k8s-east-token.txt"
      - echo "k8s-west token saved to gke/k8s-west-token.txt"

  setup-k8s-secrets-east:
    desc: "Setup Kubernetes secrets for k8s-east cluster"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
      CONSUL_CACERT:
        sh: terraform output -json tls_info | jq -r '.ca_cert'
      GOSSIP_KEY:
        sh: terraform output -json auth_tokens | jq -r '.gossip_key'
    cmds:
      - echo "=== Setting up Kubernetes secrets for k8s-east ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - kubectl create namespace consul || true
      - kubectl create secret generic consul-bootstrap-token --from-literal=token="{{.CONSUL_HTTP_TOKEN}}" -n consul || true
      - kubectl create secret generic consul-partition-token --from-file=token=../gke/k8s-east-token.txt -n consul || true
      - echo "{{.CONSUL_CACERT}}" | base64 -d > /tmp/consul-ca.crt
      - kubectl create secret generic consul-ca-cert --from-file=tls.crt=/tmp/consul-ca.crt -n consul || true
      - kubectl create secret generic consul-gossip-encryption-key --from-literal=key="{{.GOSSIP_KEY}}" -n consul || true
      - kubectl create secret generic consul-enterprise-license --from-literal=key="$CONSUL_LICENSE" -n consul || true
      - rm -f /tmp/consul-ca.crt
      - echo "=== Kubernetes secrets created for k8s-east ==="

  setup-k8s-secrets-west:
    desc: "Setup Kubernetes secrets for k8s-west cluster"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
      CONSUL_CACERT:
        sh: terraform output -json tls_info | jq -r '.ca_cert'
      GOSSIP_KEY:
        sh: terraform output -json auth_tokens | jq -r '.gossip_key'
    cmds:
      - echo "=== Setting up Kubernetes secrets for k8s-west ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - kubectl create namespace consul || true
      - kubectl create secret generic consul-bootstrap-token --from-literal=token="{{.CONSUL_HTTP_TOKEN}}" -n consul || true
      - kubectl create secret generic consul-partition-token --from-file=token=../gke/k8s-west-token.txt -n consul || true
      - echo "{{.CONSUL_CACERT}}" | base64 -d > /tmp/consul-ca.crt
      - kubectl create secret generic consul-ca-cert --from-file=tls.crt=/tmp/consul-ca.crt -n consul || true
      - kubectl create secret generic consul-gossip-encryption-key --from-literal=key="{{.GOSSIP_KEY}}" -n consul || true
      - kubectl create secret generic consul-enterprise-license --from-literal=key="$CONSUL_LICENSE" -n consul || true
      - rm -f /tmp/consul-ca.crt
      - echo "=== Kubernetes secrets created for k8s-west ==="

  deploy-consul-k8s-east:
    desc: "Deploy Consul to k8s-east cluster"
    cmds:
      - echo "=== Deploying Consul to k8s-east ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - helm repo add hashicorp https://helm.releases.hashicorp.com
      - helm repo update
      - helm upgrade --install consul hashicorp/consul -n consul -f gke/k8s-east/helm-values.yaml --version 1.5.0
      - echo "=== Consul deployed to k8s-east ==="

  deploy-consul-k8s-west:
    desc: "Deploy Consul to k8s-west cluster"
    cmds:
      - echo "=== Deploying Consul to k8s-west ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - helm repo add hashicorp https://helm.releases.hashicorp.com
      - helm repo update
      - helm upgrade --install consul hashicorp/consul -n consul -f gke/k8s-west/helm-values.yaml --version 1.5.0
      - echo "=== Consul deployed to k8s-west ==="

  deploy-consul-k8s-both:
    desc: "Deploy Consul to both GKE clusters"
    cmds:
      - task: deploy-consul-k8s-east
      - task: deploy-consul-k8s-west
      - echo "=== Consul deployed to both GKE clusters ==="

  admin-partitions-full-setup:
    desc: "Complete admin partitions setup with API Gateway"
    cmds:
      - echo "=== Starting complete admin partitions setup ==="
      - task: create-consul-partitions
      - task: create-consul-namespaces
      - task: create-partition-acl-policies
      - task: create-partition-tokens
      - task: deploy-gke-both
      - task: setup-kubectl-contexts
      - task: setup-k8s-secrets-east
      - task: setup-k8s-secrets-west
      - task: deploy-consul-k8s-both
      - task: deploy-full-api-gateway-stack
      - echo "=== Admin partitions setup complete with API Gateway ==="

  deploy-api-gateways:
    desc: "Deploy API Gateways to both GKE clusters"
    cmds:
      - echo "=== Deploying API Gateways ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - kubectl create namespace development || true
      - kubectl apply -f gke/api-gateway/gateway-k8s-east.yaml
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - kubectl create namespace production || true
      - kubectl apply -f gke/api-gateway/gateway-k8s-west.yaml
      - echo "=== API Gateways deployed ==="

  deploy-sample-apps:
    desc: "Deploy sample applications to test admin partitions"
    cmds:
      - echo "=== Deploying sample applications ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - kubectl create namespace development || true
      - kubectl apply -f gke/sample-apps/frontend-k8s-east.yaml
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - kubectl create namespace production || true
      - kubectl apply -f gke/sample-apps/backend-k8s-west.yaml
      - echo "=== Sample applications deployed ==="
      - echo "Frontend deployed to k8s-east/development"
      - echo "Backend deployed to k8s-west/production"

  deploy-httproutes:
    desc: "Deploy HTTP Routes for API Gateway"
    cmds:
      - echo "=== Deploying HTTP Routes ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - kubectl apply -f gke/api-gateway/frontend-httproute-k8s-east.yaml
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - kubectl apply -f gke/api-gateway/backend-httproute-k8s-west.yaml
      - echo "=== HTTP Routes deployed ==="

  deploy-service-intentions:
    desc: "Deploy service intentions for cross-partition communication"
    cmds:
      - echo "=== Deploying service intentions ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - kubectl apply -f gke/api-gateway/service-intentions.yaml
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - kubectl apply -f gke/api-gateway/service-intentions.yaml
      - echo "=== Service intentions deployed ==="

  deploy-full-api-gateway-stack:
    desc: "Deploy complete API Gateway stack with applications"
    cmds:
      - task: deploy-api-gateways
      - task: deploy-sample-apps
      - task: deploy-httproutes
      - task: deploy-service-intentions
      - echo "=== Complete API Gateway stack deployed ==="

  admin-partitions-status:
    desc: "Check status of admin partitions and applications"
    dir: "{{.DC1_DIR}}"
    vars:
      CONSUL_HTTP_ADDR:
        sh: terraform output -json hashistack_urls | jq -r '.consul.api'
      CONSUL_HTTP_TOKEN:
        sh: terraform output -json auth_tokens | jq -r '.consul_token'
    cmds:
      - echo "=== Admin Partitions Status ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul partition list
      - echo ""
      - echo "=== Namespaces in k8s-east ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace list -partition=k8s-east
      - echo ""
      - echo "=== Namespaces in k8s-west ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul namespace list -partition=k8s-west
      - echo ""
      - echo "=== Services in k8s-east ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul catalog services -partition=k8s-east
      - echo ""
      - echo "=== Services in k8s-west ==="
      - export CONSUL_HTTP_ADDR="{{.CONSUL_HTTP_ADDR}}" && export CONSUL_HTTP_TOKEN="{{.CONSUL_HTTP_TOKEN}}" && consul catalog services -partition=k8s-west
      - echo ""
      - echo "=== GKE Cluster Status ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - echo "k8s-east pods:"
      - kubectl get pods -n consul
      - kubectl get pods -n development
      - echo "k8s-east API Gateway:"
      - kubectl get gateway -n development
      - kubectl get httproutes -n development
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - echo "k8s-west pods:"
      - kubectl get pods -n consul
      - kubectl get pods -n production
      - echo "k8s-west API Gateway:"
      - kubectl get gateway -n production
      - kubectl get httproutes -n production
      - echo ""
      - echo "=== API Gateway External IPs ==="
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-southwest1_k8s-east
      - echo "k8s-east API Gateway:"
      - kubectl get svc -n development | grep api-gateway || echo "No API Gateway service found"
      - kubectl config use-context gke_hc-1031dcc8d7c24bfdbb4c08979b0_europe-west1_k8s-west
      - echo "k8s-west API Gateway:"
      - kubectl get svc -n production | grep api-gateway || echo "No API Gateway service found"

  # === Quick Access ===

  ssh-dc1-server:
    desc: "SSH to DC1 server node"
    dir: "{{.DC1_DIR}}"
    cmds:
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        echo "Connecting to DC1 server at $SERVER_IP"
        ssh ubuntu@$SERVER_IP

  ssh-dc2-server:
    desc: "SSH to DC2 server node"
    dir: "{{.DC2_DIR}}"
    cmds:
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        echo "Connecting to DC2 server at $SERVER_IP"
        ssh ubuntu@$SERVER_IP

  # === Cleanup ===

  destroy-dc1:
    desc: "Destroy DC1 cluster"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform destroy -auto-approve

  destroy-dc2:
    desc: "Destroy DC2 cluster"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform destroy -auto-approve

  destroy-both:
    desc: "Destroy both clusters"
    cmds:
      - task: destroy-dc1
      - task: destroy-dc2

  # === Cluster Peering ===

  peering:help:
    desc: "Show cluster peering setup instructions"
    silent: true
    cmds:
      - echo "Consul Cluster Peering Setup"
      - echo "Prerequisites - Both clusters must be deployed"
      - echo "task peering:env-setup - Get environment setup"
      - echo "task peering:setup - Start peering setup"
      - echo "task peering:establish - Establish peering connection"
      - echo "task peering:complete - Complete setup"
      - echo "task peering:verify - Verify peering works"
      - echo "Detailed guide at consul/peering/README.md"

  peering:env-setup:
    desc: "Show environment setup for cluster peering"
    silent: true
    cmds:
      - echo "Set environment variables for cluster peering"
      - echo "See consul/peering/README.md for detailed instructions"

  peering:setup:
    desc: "Start cluster peering setup (phases 1-8)"
    dir: consul/peering
    cmds:
      - task: setup-peering
    preconditions:
      - sh: "[ ! -z \"$DC1_CONSUL_ADDR\" ]"
        msg: "DC1_CONSUL_ADDR not set. Run 'task peering:env-setup' for instructions"
      - sh: "[ ! -z \"$DC2_CONSUL_ADDR\" ]"
        msg: "DC2_CONSUL_ADDR not set. Run 'task peering:env-setup' for instructions"

  peering:establish:
    desc: "Establish peering connection (run after setup)"
    dir: consul/peering
    cmds:
      - task: establish-peering

  peering:complete:
    desc: "Complete peering setup (phases 9-13)"
    dir: consul/peering
    cmds:
      - task: complete-peering

  peering:verify:
    desc: "Verify peering status and connectivity"
    dir: consul/peering
    cmds:
      - task: verify-setup
      - task: check-services

  peering:sameness-groups:
    desc: "Configure sameness groups for failover"
    dir: consul/peering
    cmds:
      - task: configure-sameness-groups

  peering:service-resolver:
    desc: "Configure service resolver for failover"
    dir: consul/peering
    cmds:
      - task: configure-service-resolver

  peering:cleanup:
    desc: "Clean up peering configuration"
    dir: consul/peering
    cmds:
      - task: cleanup-peering
      - task: cleanup-jobs

  # === Enhanced Status and Information ===

  status:
    desc: "Show status of both clusters and peering"
    cmds:
      - echo "=== Infrastructure Status ==="
      - task: check-infra
      - echo ""
      - echo "=== Cluster Access ==="
      - task: show-urls
      - echo ""
      - echo "=== Peering Status ==="
      - echo "Environment variables not set - run task peering env-setup"

  # === Help System ===

  help:
    desc: "Show all available tasks"
    silent: true
    cmds:
      - echo "HashiCorp Multi-Cluster Infrastructure"
      - echo "Use 'task --list' to see all available tasks"
      - echo "Main tasks - deploy-both, peering:help, status"

  default:
    cmds:
      - task: help