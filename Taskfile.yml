version: '3'

vars:
  DC1_DIR: clusters/dc1/terraform
  DC2_DIR: clusters/dc2/terraform

tasks:
  # === Image Building ===

  build-images:
    desc: "Build HashiStack images with Packer"
    dir: "packer/gcp"
    cmds:
      - echo "Building HashiStack images for new project..."
      - packer build .
      - echo "HashiStack images built successfully"

  # === Infrastructure Deployment ===
  
  deploy-dc1:
    desc: "Deploy DC1 cluster (europe-southwest1)"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform init
      - terraform apply -auto-approve
      - echo "=== DC1 Cluster Info ==="
      - terraform output cluster_info
      - echo "=== DC1 URLs ==="
      - terraform output hashistack_urls
      - echo "=== DC1 Environment Setup ==="
      - terraform output -json environment_setup | jq -r .bash_export

  deploy-dc2:
    desc: "Deploy DC2 cluster (europe-west1)"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform init
      - terraform apply -auto-approve
      - echo "=== DC2 Cluster Info ==="
      - terraform output cluster_info
      - echo "=== DC2 URLs ==="
      - terraform output hashistack_urls
      - echo "=== DC2 Environment Setup ==="
      - terraform output -json environment_setup | jq -r .bash_export

  deploy-both:
    desc: "Deploy both DC1 and DC2 clusters (sequential)"
    cmds:
      - task: deploy-dc1
      - task: deploy-dc2
      - echo "=== Both clusters deployed ==="
      - echo "CRITICAL NEXT STEPS:"
      - echo "1. Run 'nomad setup consul -y' on each cluster's server nodes"
      - echo "2. Use task ssh-dc1-server and task ssh-dc2-server to connect"
      - echo "3. Then deploy networking and monitoring"

  # === Consul-Nomad Integration Setup ===

  setup-consul-nomad-dc1:
    desc: "Setup Consul-Nomad integration for DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "Setting up Consul-Nomad integration for DC1..."
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP 'sudo nomad setup consul -y'
      - echo "DC1 Consul-Nomad integration complete"

  setup-consul-nomad-dc2:
    desc: "Setup Consul-Nomad integration for DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "Setting up Consul-Nomad integration for DC2..."
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP 'sudo nomad setup consul -y'
      - echo "DC2 Consul-Nomad integration complete"

  setup-consul-nomad-both:
    desc: "Setup Consul-Nomad integration for both clusters"
    cmds:
      - task: setup-consul-nomad-dc1
      - task: setup-consul-nomad-dc2
      - echo "=== Consul-Nomad integration complete for both clusters ==="

  # === Application Deployment ===

  deploy-traefik-dc1:
    desc: "Deploy Traefik to DC1"
    dir: "clusters/dc1"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/traefik.hcl
      - echo "Traefik deployed to DC1"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status traefik

  deploy-traefik-dc2:
    desc: "Deploy Traefik to DC2"
    dir: "clusters/dc2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/traefik.hcl
      - echo "Traefik deployed to DC2"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status traefik

  deploy-traefik:
    desc: "Deploy Traefik to both clusters"
    cmds:
      - task: deploy-traefik-dc1
      - task: deploy-traefik-dc2
      - echo "=== Traefik deployed to both clusters ==="

  deploy-monitoring-dc1:
    desc: "Deploy Prometheus and Grafana to DC1"
    dir: "clusters/dc1"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/prometheus.hcl
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/grafana.hcl
      - echo "Monitoring stack deployed to DC1"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status prometheus
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status grafana

  deploy-monitoring-dc2:
    desc: "Deploy Prometheus and Grafana to DC2"
    dir: "clusters/dc2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/prometheus.hcl
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job run jobs/monitoring/grafana.hcl
      - echo "Monitoring stack deployed to DC2"
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status prometheus
      - export NOMAD_ADDR="{{.NOMAD_ADDR}}" && export NOMAD_TOKEN="{{.NOMAD_TOKEN}}" && nomad job status grafana

  deploy-monitoring:
    desc: "Deploy monitoring stack to both clusters"
    cmds:
      - task: deploy-monitoring-dc1
      - task: deploy-monitoring-dc2
      - echo "=== Monitoring stack deployed to both clusters ==="

  # === Status and Information ===

  check-infra:
    desc: "Check deployment status of both clusters"
    cmds:
      - echo "Checking DC1 Infrastructure..."
      - cd {{.DC1_DIR}} && terraform show > /dev/null 2>&1 && echo "DC1 deployed" || echo "DC1 not deployed"
      - echo "Checking DC2 Infrastructure..."  
      - cd {{.DC2_DIR}} && terraform show > /dev/null 2>&1 && echo "DC2 deployed" || echo "DC2 not deployed"

  status-dc1:
    desc: "Show DC1 status"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform output cluster_info || echo "No cluster info available"

  status-dc2:
    desc: "Show DC2 status"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform output cluster_info || echo "No cluster info available"

  show-urls:
    desc: "Show all access URLs for both clusters"
    cmds:
      - echo "=== DC1 URLs ==="
      - cd {{.DC1_DIR}} && terraform output hashistack_urls || echo "No URLs available"
      - cd {{.DC1_DIR}} && terraform output monitoring_urls || echo "No monitoring URLs available"
      - echo ""
      - echo "=== DC2 URLs ==="
      - cd {{.DC2_DIR}} && terraform output hashistack_urls || echo "No URLs available"
      - cd {{.DC2_DIR}} && terraform output monitoring_urls || echo "No monitoring URLs available"

  eval-vars-dc1:
    desc: "Show environment variables for DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "# DC1 Environment Setup"
      - terraform output -json environment_setup | jq -r .bash_export

  eval-vars-dc2:
    desc: "Show environment variables for DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "# DC2 Environment Setup"
      - terraform output -json environment_setup | jq -r .bash_export

  eval-vars:
    desc: "Show environment variables for both clusters"
    cmds:
      - task: eval-vars-dc1
      - echo ""
      - task: eval-vars-dc2

  get-server-ips-dc1:
    desc: "Get external server IPs for DC1 (for Kubernetes integration)"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "=== DC1 Server External IPs ==="
      - gcloud compute instances list --filter='name~hashi-server' --format='value(name,EXTERNAL_IP)' | head -3
      - echo ""
      - echo "For Kubernetes Helm values, use these IPs in externalServers.hosts:"
      - gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3 | sed 's/^/  - "/' | sed 's/$/"/'

  get-server-ips-dc2:
    desc: "Get external server IPs for DC2 (for Kubernetes integration)"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "=== DC2 Server External IPs ==="
      - gcloud compute instances list --filter='name~hashi-server' --format='value(name,EXTERNAL_IP)' | head -3
      - echo ""
      - echo "For Kubernetes Helm values, use these IPs in externalServers.hosts:"
      - gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3 | sed 's/^/  - "/' | sed 's/$/"/'

  get-server-ips:
    desc: "Get external server IPs for both clusters"
    cmds:
      - task: get-server-ips-dc1
      - echo ""
      - task: get-server-ips-dc2

  check-consul-grpc-dc1:
    desc: "Check Consul gRPC connectivity on DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "=== Testing Consul gRPC connectivity on DC1 ==="
      - echo "Getting server IPs..."
      - gcloud compute instances list --filter='name~hashi-server' --format='value(name,EXTERNAL_IP)' | head -3
      - echo ""
      - echo "Testing gRPC port 8502 connectivity:"
      - |-
        for ip in $(gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3); do
          echo "Testing $ip:8502..."
          timeout 5 bash -c "</dev/tcp/$ip/8502" && echo "✅ Port 8502 is open on $ip" || echo "❌ Port 8502 is closed/filtered on $ip"
        done
      - echo ""
      - echo "Testing HTTP port 8500 connectivity:"
      - |-
        for ip in $(gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3); do
          echo "Testing $ip:8500..."
          timeout 5 bash -c "</dev/tcp/$ip/8500" && echo "✅ Port 8500 is open on $ip" || echo "❌ Port 8500 is closed/filtered on $ip"
        done

  check-consul-grpc-dc2:
    desc: "Check Consul gRPC connectivity on DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "=== Testing Consul gRPC connectivity on DC2 ==="
      - echo "Getting server IPs..."
      - gcloud compute instances list --filter='name~hashi-server' --format='value(name,EXTERNAL_IP)' | head -3
      - echo ""
      - echo "Testing gRPC port 8502 connectivity:"
      - |-
        for ip in $(gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3); do
          echo "Testing $ip:8502..."
          timeout 5 bash -c "</dev/tcp/$ip/8502" && echo "✅ Port 8502 is open on $ip" || echo "❌ Port 8502 is closed/filtered on $ip"
        done
      - echo ""
      - echo "Testing HTTP port 8500 connectivity:"
      - |-
        for ip in $(gcloud compute instances list --filter='name~hashi-server' --format='value(EXTERNAL_IP)' | head -3); do
          echo "Testing $ip:8500..."
          timeout 5 bash -c "</dev/tcp/$ip/8500" && echo "✅ Port 8500 is open on $ip" || echo "❌ Port 8500 is closed/filtered on $ip"
        done

  # === Quick Access ===

  ssh-dc1-server:
    desc: "SSH to DC1 server node"
    dir: "{{.DC1_DIR}}"
    cmds:
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        echo "Connecting to DC1 server at $SERVER_IP"
        ssh ubuntu@$SERVER_IP

  ssh-dc2-server:
    desc: "SSH to DC2 server node"
    dir: "{{.DC2_DIR}}"
    cmds:
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        echo "Connecting to DC2 server at $SERVER_IP"
        ssh ubuntu@$SERVER_IP

  # === Cleanup ===

  destroy-dc1:
    desc: "Destroy DC1 cluster"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform destroy -auto-approve

  destroy-dc2:
    desc: "Destroy DC2 cluster"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform destroy -auto-approve

  destroy-both:
    desc: "Destroy both clusters"
    cmds:
      - task: destroy-dc1
      - task: destroy-dc2

  # === Cluster Peering ===

  peering:help:
    desc: "Show cluster peering setup instructions"
    silent: true
    cmds:
      - echo "Consul Cluster Peering Setup"
      - echo "Prerequisites - Both clusters must be deployed"
      - echo "task peering:env-setup - Get environment setup"
      - echo "task peering:setup - Start peering setup"
      - echo "task peering:establish - Establish peering connection"
      - echo "task peering:complete - Complete setup"
      - echo "task peering:verify - Verify peering works"
      - echo "Detailed guide at consul/peering/README.md"

  peering:env-setup:
    desc: "Show environment setup for cluster peering"
    silent: true
    cmds:
      - echo "Set environment variables for cluster peering"
      - echo "See consul/peering/README.md for detailed instructions"

  peering:setup:
    desc: "Start cluster peering setup (phases 1-8)"
    dir: consul/peering
    cmds:
      - task: setup-peering
    preconditions:
      - sh: "[ ! -z \"$DC1_CONSUL_ADDR\" ]"
        msg: "DC1_CONSUL_ADDR not set. Run 'task peering:env-setup' for instructions"
      - sh: "[ ! -z \"$DC2_CONSUL_ADDR\" ]"
        msg: "DC2_CONSUL_ADDR not set. Run 'task peering:env-setup' for instructions"

  peering:establish:
    desc: "Establish peering connection (run after setup)"
    dir: consul/peering
    cmds:
      - task: establish-peering

  peering:complete:
    desc: "Complete peering setup (phases 9-13)"
    dir: consul/peering
    cmds:
      - task: complete-peering

  peering:verify:
    desc: "Verify peering status and connectivity"
    dir: consul/peering
    cmds:
      - task: verify-setup
      - task: check-services

  peering:sameness-groups:
    desc: "Configure sameness groups for failover"
    dir: consul/peering
    cmds:
      - task: configure-sameness-groups

  peering:service-resolver:
    desc: "Configure service resolver for failover"
    dir: consul/peering
    cmds:
      - task: configure-service-resolver

  peering:cleanup:
    desc: "Clean up peering configuration"
    dir: consul/peering
    cmds:
      - task: cleanup-peering
      - task: cleanup-jobs

  # === Enhanced Status and Information ===

  status:
    desc: "Show status of both clusters and peering"
    cmds:
      - echo "=== Infrastructure Status ==="
      - task: check-infra
      - echo ""
      - echo "=== Cluster Access ==="
      - task: show-urls
      - echo ""
      - echo "=== Peering Status ==="
      - echo "Environment variables not set - run task peering env-setup"

  # === Help System ===

  help:
    desc: "Show all available tasks"
    silent: true
    cmds:
      - echo "HashiCorp Multi-Cluster Infrastructure"
      - echo "Use 'task --list' to see all available tasks"
      - echo "Main tasks - deploy-both, peering:help, status"

  default:
    cmds:
      - task: help