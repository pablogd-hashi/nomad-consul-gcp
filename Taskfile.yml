version: '3'

vars:
  DC1_DIR: clusters/dc1-us-east2/terraform
  DC2_DIR: clusters/dc2-us-west2/terraform

tasks:
  # === Infrastructure Deployment ===
  
  deploy-dc1:
    desc: "Deploy DC1 cluster (us-east2)"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform apply -auto-approve
      - echo "=== DC1 Cluster Info ==="
      - terraform output cluster_info
      - echo "=== DC1 URLs ==="
      - terraform output hashistack_urls
      - echo "=== DC1 Environment Setup ==="
      - echo 'eval "$(terraform output -json environment_setup | jq -r .bash_export)"'
      - echo "=== CRITICAL: Setup Consul-Nomad Integration ==="
      - echo "Run this command to configure Consul-Nomad integration:"
      - |
        echo "ssh ubuntu@\$(terraform output -json server_nodes | jq -r '.hashi_servers.\"server-1\".public_ip') 'sudo nomad setup consul -y'"

  deploy-dc2:
    desc: "Deploy DC2 cluster (us-west2)"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform apply -auto-approve
      - echo "=== DC2 Cluster Info ==="
      - terraform output cluster_info
      - echo "=== DC2 URLs ==="
      - terraform output hashistack_urls
      - echo "=== DC2 Environment Setup ==="
      - echo 'eval "$(terraform output -json environment_setup | jq -r .bash_export)"'
      - echo "=== CRITICAL: Setup Consul-Nomad Integration ==="
      - echo "Run this command to configure Consul-Nomad integration:"
      - |
        echo "ssh ubuntu@\$(terraform output -json server_nodes | jq -r '.hashi_servers.\"server-1\".public_ip') 'sudo nomad setup consul -y'"

  deploy-both:
    desc: "Deploy both DC1 and DC2 clusters (sequential)"
    cmds:
      - task: deploy-dc1
      - task: deploy-dc2
      - echo "=== Both clusters deployed ==="
      - echo "DC1 (us-east2): $(cd {{.DC1_DIR}} && terraform output -json hashistack_urls | jq -r .nomad.ui_url)"
      - echo "DC2 (us-west2): $(cd {{.DC2_DIR}} && terraform output -json hashistack_urls | jq -r .nomad.ui_url)"
      - echo ""
      - echo "ðŸš¨ CRITICAL NEXT STEPS:"
      - echo "1. Run 'nomad setup consul -y' on each cluster's server nodes"
      - echo "2. Use the SSH commands shown above to connect to each cluster"
      - echo "3. Then deploy networking and monitoring with 'task deploy-full-stack'"

  # === Consul-Nomad Integration Setup ===

  setup-consul-nomad-dc1:
    desc: "Setup Consul-Nomad integration for DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "Setting up Consul-Nomad integration for DC1..."
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP 'sudo nomad setup consul -y'
      - echo "DC1 Consul-Nomad integration complete"

  setup-consul-nomad-dc2:
    desc: "Setup Consul-Nomad integration for DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "Setting up Consul-Nomad integration for DC2..."
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP 'sudo nomad setup consul -y'
      - echo "DC2 Consul-Nomad integration complete"

  setup-consul-nomad-both:
    desc: "Setup Consul-Nomad integration for both clusters"
    cmds:
      - task: setup-consul-nomad-dc1
      - task: setup-consul-nomad-dc2
      - echo "=== Consul-Nomad integration complete for both clusters ==="

  # === Application Deployment ===

  deploy-traefik-dc1:
    desc: "Deploy Traefik to DC1"
    dir: "clusters/dc1-us-east2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - nomad job run jobs/monitoring/traefik.hcl
      - echo "Traefik deployed to DC1"
      - nomad job status traefik

  deploy-traefik-dc2:
    desc: "Deploy Traefik to DC2"
    dir: "clusters/dc2-us-west2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - nomad job run jobs/monitoring/traefik.hcl
      - echo "Traefik deployed to DC2"
      - nomad job status traefik

  deploy-networking:
    desc: "Deploy Traefik to both clusters"
    cmds:
      - task: deploy-traefik-dc1
      - task: deploy-traefik-dc2
      - echo "=== Traefik deployed to both clusters ==="

  deploy-monitoring-dc1:
    desc: "Deploy Prometheus and Grafana to DC1"
    dir: "clusters/dc1-us-east2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - nomad job run jobs/monitoring/prometheus.hcl
      - nomad job run jobs/monitoring/grafana.hcl
      - echo "Monitoring stack deployed to DC1"
      - nomad job status prometheus
      - nomad job status grafana

  deploy-monitoring-dc2:
    desc: "Deploy Prometheus and Grafana to DC2"
    dir: "clusters/dc2-us-west2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - nomad job run jobs/monitoring/prometheus.hcl
      - nomad job run jobs/monitoring/grafana.hcl
      - echo "Monitoring stack deployed to DC2"
      - nomad job status prometheus
      - nomad job status grafana

  deploy-monitoring:
    desc: "Deploy monitoring stack to both clusters"
    cmds:
      - task: deploy-monitoring-dc1
      - task: deploy-monitoring-dc2
      - echo "=== Monitoring stack deployed to both clusters ==="

  # === Full Stack Deployment ===

  deploy-full-stack:
    desc: "Deploy complete stack: infrastructure + Consul-Nomad setup + networking + monitoring"
    cmds:
      - task: deploy-both
      - echo "Waiting 60 seconds for clusters to stabilize..."
      - sleep 60
      - task: setup-consul-nomad-both
      - echo "Waiting 30 seconds for Consul-Nomad integration to complete..."
      - sleep 30
      - task: deploy-networking
      - echo "Waiting 30 seconds for Traefik to stabilize..."
      - sleep 30
      - task: deploy-monitoring
      - echo "=== Full stack deployment complete ==="
      - task: show-urls

  # === Status and Information ===

  status-dc1:
    desc: "Show DC1 cluster status"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "=== DC1 Cluster Status ==="
      - terraform output cluster_info
      - terraform output load_balancers

  status-dc2:
    desc: "Show DC2 cluster status"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "=== DC2 Cluster Status ==="
      - terraform output cluster_info
      - terraform output load_balancers

  show-urls:
    desc: "Show all access URLs for both clusters"
    cmds:
      - echo "=== DC1 URLs (us-east2) ==="
      - cd {{.DC1_DIR}} && terraform output hashistack_urls
      - cd {{.DC1_DIR}} && terraform output monitoring_urls
      - echo ""
      - echo "=== DC2 URLs (us-west2) ==="
      - cd {{.DC2_DIR}} && terraform output hashistack_urls
      - cd {{.DC2_DIR}} && terraform output monitoring_urls

  eval-vars-dc1:
    desc: "Show environment variables for DC1"
    dir: "{{.DC1_DIR}}"
    cmds:
      - echo "# DC1 Environment Setup (us-east2)"
      - terraform output -json environment_setup | jq -r .bash_export

  eval-vars-dc2:
    desc: "Show environment variables for DC2"
    dir: "{{.DC2_DIR}}"
    cmds:
      - echo "# DC2 Environment Setup (us-west2)"
      - terraform output -json environment_setup | jq -r .bash_export

  eval-vars:
    desc: "Show environment variables for both clusters"
    cmds:
      - task: eval-vars-dc1
      - echo ""
      - task: eval-vars-dc2

  # === Cleanup ===

  destroy-dc1:
    desc: "Destroy DC1 cluster"
    dir: "{{.DC1_DIR}}"
    cmds:
      - terraform destroy -auto-approve

  destroy-dc2:
    desc: "Destroy DC2 cluster"
    dir: "{{.DC2_DIR}}"
    cmds:
      - terraform destroy -auto-approve

  destroy-both:
    desc: "Destroy both clusters"
    cmds:
      - task: destroy-dc1
      - task: destroy-dc2

  # === Job Management ===

  stop-jobs-dc1:
    desc: "Stop all jobs in DC1"
    dir: "clusters/dc1-us-east2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - nomad job stop traefik || true
      - nomad job stop prometheus || true
      - nomad job stop grafana || true

  stop-jobs-dc2:
    desc: "Stop all jobs in DC2"
    dir: "clusters/dc2-us-west2"
    vars:
      NOMAD_ADDR:
        sh: cd terraform && terraform output -json hashistack_urls | jq -r '.nomad.api'
      NOMAD_TOKEN:
        sh: cd terraform && terraform output -json auth_tokens | jq -r '.nomad_token'
    cmds:
      - nomad job stop traefik || true
      - nomad job stop prometheus || true
      - nomad job stop grafana || true

  # === Quick Access ===

  ssh-dc1-server:
    desc: "SSH to DC1 server node"
    dir: "{{.DC1_DIR}}"
    cmds:
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP

  ssh-dc2-server:
    desc: "SSH to DC2 server node"
    dir: "{{.DC2_DIR}}"
    cmds:
      - |
        SERVER_IP=$(terraform output -json server_nodes | jq -r '.hashi_servers."server-1".public_ip')
        ssh ubuntu@$SERVER_IP